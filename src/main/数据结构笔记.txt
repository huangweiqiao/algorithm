数据结构
	狭义：
		数据结构是专门研究数据存储的问题
		数据存储包含两方面：个体存储 + 个体间的关系存储
	广义：
		数据结构既包含数据的存储也包含数据的操作
		对数据存储的操作就是算法
		
算法
	狭义
		算法和数据的存储方式密切相关
	广义
		算法和数据的存储方式无关
		这就使泛型思想

	泛型：利用某种技术达到的效果就是：不同的存储方式，执行的操作相同。
		同一种逻辑结构，不管这种逻辑结构的物理存储方式是什么样子的
		我们都可以对它做同样的操作。


数据的存储结构：

	线性结构【把所有的节点用一根线穿起来】
		连续存储 【数组】
			优点：查询数度快
			缺点：插入、删除的数度慢 (因为每个元素的位置都要变)
			      空间常有限制
			      需要连续的内存
			      事先要知道大小
		离散存储 【链表】
			优点：没有空间限制
			      插入，删除速度快
			缺点：
			定义：
				n个节点离散分配。
				彼此通过指针相连。
				每个节点只有一个前驱节点，每个节点只有一个后续节点。
				首节点没有前驱节点，尾节点没有后续节点。
				
			术语：
				首节点：第一个有效节点
				尾节点：最后一个有效节点
				头节点：第一个有效节点前面的那个节点，头节点并不存储有效数据，加头节点的作用主要是方便对链表的操作。
								头节点的数据类型和首节点相同
				头指针：指向头节点的指针变量
				尾指针：指向尾节点的指针变量
				
			确定一个链表需要几个参数
				一个就行，只要头指针。
			
			链表的分类
				单链表
					每一个节点只有个指针域
				双链表
					每一个节点有两个指针域
					
				循环链表
					能通过任何节点找到所有的节点
				非循环链表
				
				链表的优缺点
				
				
			算法
				遍历
				查找
				清空
				销毁
				求长度
				排序
				删除节点
				插入节点
				
		应用：
		   1、栈
					定义：
						一种可以实现“先进后出“的存储结构。
						栈类似于箱子。
						
					分类：
						静态栈
						动态栈
						
					算法：
						出栈
						压栈
						
					应用：
						函数的调用
						中断
						表达式求值
						内存分配
						缓存处理
						迷宫
						
		     2、队列
						定义：
							一种可以实现“先进先出”的存储结构
						分类：
							链式队列 --用链表实现
							
							静态队列 --用数组实现
								静态队列通常都必须是循环队列
								
								循环队列的讲解：
									1.静态队列为什么必须是循环队列
									2.循环队列需要几个参数来确定
										需要两个参数来确定
										front --头部
										rear --尾部
									3.循环队列各个参数的含义
										两个参数不同场合有不同的意义
											1)、队列初始化
														front和rear的值都是零
											2)、队列非空
														front代表的是队列的第一个元素
														rear代表的是队列的最后一个有效元素的下一个元素
											3)、队列空
														front和rear的值相等，但不一定是零
											
									4.循环队列入队伪算法讲解
											两步完成：
												1、将值存入r所代表的位置
												2、错误的写法 r = r+1;
													 正确的写法是：r = (r+1)% 数组的长度 
												 
									5.循环队列出队伪算法讲解
											两步完成：
												1、将f的值保存
												2、f = (f+1)% 数组的长度
									6.如何判断循环队列是否为空
												如果front与rear的值相等 则该队列为空
									7.如何判断循环队列是否已满
												预备知识：
													front的值可能比rear大
													front的值也可能比rear小
												两种方式：
													1、多增加一个标识参数,每增加一个就加一，每删除一个就减一。
													2、少用一个元素
															如果r和f紧挨着 则满
															if(((r+1)%数组的长度)== f )
																	满
															else
																	不满
						队列算法
							入队
								
							出队
						队列的具体应用：
							所有和时间有关的操作都与队列有队列的影子
									
	非线性
	
	 		树
	 			专业定义：
	 				1、有且只有一个称为根的节点。
	 				2、有若干个互不相交的子树，这些子树本身也是一颗树。
	 			通俗定义：
	 				1、树是由节点和边组成
	 				2、每个节点只有一个父节点但可以有多个子节点
	 				3、但有一个节点例外，该节点没有父节点，这个节点就是整颗树的根节点。
	 				
	 				节点术语：
	 					节点 父节点 子节点
	 					子孙 堂兄弟 
	 					深度：
	 						从根节点到最底层节点的层数称为深度（包括根节点也包括子节点）
	 		        根节点是第一层。
	 		       叶子节点：
	 		       	没有子节点的子节点
	 		       非终端节点：
	 		       	实际就使非叶子节点
	 		       度：
	 		       	子节点的个数最多的那颗树的子节点个数称为度   （一颗树可能有几颗子树）
	 			分类：
	 				一般树
	 					任意一个节点的子节点的个数都不受限制
	 					
	 				二叉树
	 					任意一个节点的子节点个数最多两个，且子节点的个数不可更改
	 					
	 					二叉树的分类：
	 						一般二叉树
	 						
	 						满二叉树
	 							在不增加数的层数的前提下，无法再添加
	 							一个节点的二叉树就是满二叉树。
	 						完全二叉树
	 							只是删除了满二叉树最底层从右至左的连续若干个节点，
	 							这样形成的二叉树就是完全二叉树。
	 				森林
	 					n个互不相交的树的集合
	 			
	 			树的存储：
	 					二叉树的存储
	 					
	 						连续存储
	 							如果不是满二叉树就要将其转换成二叉树  （因为转换成线性之后又可以推回来这棵树是什么样的）
	 							优点：查找某个节点的父节点和子节点速度很快 （也包括判断有没有子节点）
	 							缺点：耗用内存空间过大 （因为要保存很多垃圾节点）
	 							
	 						链式存储
	 							用链表的形式存储
	 							
	 					一般树存储
	 							双亲表示法
	 								求父节点方便
	 								
	 							孩子表示法
	 								求子节点方便
	 								
	 							双亲孩子表示法
	 								求父节点和子节点都很方便
	 							
	 							二叉树表示法
	 								把一个普通数转换成二叉树来存储
	 								具体转换方法
	 									设法保证任意一个节点的
	 									左指针域指向它的第一个孩子
	 									右指针域指向它的下一个兄弟
	 									只要能满足此条件，就能将一颗普通树转换成二叉树。
	 									一个普通数转化成二叉树一定没有右子树
	 					森林的存储
	 							先将森林转化成二叉树，然后再存储二叉树。
	 							
	 				
	 			二叉树的操作：
	 			
	 				遍历
	 					先序遍历	
	 						先访问根节点
	 						再先序访问左子树
	 						再先序访问右子树
	 					
	 					中序遍历
	 						中序遍历左子树
	 						再访问根节点
	 						再中序遍历右子树
	 					
	 					后序遍历
	 						中序遍历左子树
	 						中序遍历右子树
	 						再访问根节点
	 					
	 					已知两种遍历序列求原始二叉树
	 						通过先序和中序可以还原出二叉树
	 						通过中序和后序可以还原出二叉树
	 						但是通过先序和后序无法还原出二叉树
	 						
	 						
	 			树的应用：
	 				数据库中数据的一种重要形式
	 				操作系统中进程树的结构
	 				面向对象语言中继承的关系
	 			
	 		图
	 		
	 		
	 		
	递归
		定义：
			一个函数自己直接或间接调用自己
			
		递归要满足的三个条件：
			1、递归必须要有一个明确的终止条件
			2、该函数所处理的规模必须在递减.  (注意是规模)
			3、这个转化必须是可解的。
			
			递归的优缺点：易于理解，速度慢，存储空间大
			循环的优缺点：不易理解，速度快，存储空间小
			
			递归的应用：
				树、森林
		举例：
			1、求阶乘
			2、1+2+3+...+100的和
			3、汉诺塔
			4、走迷宫
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		
	 		